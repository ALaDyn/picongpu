/* Copyright 2013-2024 Rene Widera, Benjamin Worpitz, Heiko Burau, Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Define particle species.
 *
 * This file collects all previous declarations of base (reference) quantities
 * and configured solvers for species and defines particle species. This
 * includes "attributes" (lvalues to store with each species) and "flags"
 * (rvalues & aliases for solvers to perform with the species for each timestep
 * and ratios to base quantities). With those information, a `Particles` class
 * is defined for each species and then collected in the list
 * `VectorAllSpecies`.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "picongpu/particles/Particles.hpp"
#include "picongpu/particles/atomicPhysics/ParticleType.hpp"

#include <pmacc/identifier/value_identifier.hpp>
#include <pmacc/meta/String.hpp>
#include <pmacc/meta/conversion/MakeSeq.hpp>
#include <pmacc/particles/Identifier.hpp>
#include <pmacc/particles/traits/FilterByFlag.hpp>

#include <cstdint>

// copper + thermal electrons
namespace picongpu
{
    /*########################### define default attributes ######################*/

    /** describe default attributes of a particle*/
    using DefaultParticleAttributes = MakeSeq_t<position<position_pic>, momentum, weighting, particleId>;

    /*############################ end default attributes ########################*/

    /*########################### define species #################################*/

    /*--------------------------- electrons --------------------------------------*/
    /* thermal bulk electrons: */
    /* ratio relative to BASE_CHARGE and BASE_MASS */
    value_identifier(float_X, MassRatioElectrons, 1.0);
    value_identifier(float_X, ChargeRatioElectrons, 1.0);

    /* ratio relative to BASE_DENSITY
     * thermal "bulk": 2x ionized n_Cu
     */
    value_identifier(float_X, DensityRatioBulkElectrons, 2._X);

    using ParticleFlagsElectrons = MakeSeq_t<
        particlePusher<UsedParticlePusher>,
        shape<UsedParticleShape>,
        interpolation<UsedField2Particle>,
        current<UsedParticleCurrentSolver>,
        massRatio<MassRatioElectrons>,
        chargeRatio<ChargeRatioElectrons>,
        densityRatio<DensityRatioBulkElectrons>,
        atomicPhysicsParticle<particles::atomicPhysics::Electron>>;

    /* thermal bulk electrons */
    using BulkElectrons = Particles<PMACC_CSTRING("eth"), ParticleFlagsElectrons, DefaultParticleAttributes>;

    /*--------------------------- ions Argon ------------------------------------*/

    /* ratio relative to BASE_CHARGE and BASE_MASS */
    value_identifier(float_X, MassRatioCopper, 63 * 1836.152672);
    value_identifier(float_X, ChargeRatioCopper, -29.0);

    /* ratio relative to BASE_DENSITY */
    value_identifier(float_X, DensityRatioCopper, 1.0_X);

    struct CopperAtomicPhysicsCfg
    {
        static constexpr char const* chargeStatesFileName = "./atomicInputData/ChargeStates_Cu.txt";
        static constexpr char const* atomicStatesFileName = "./atomicInputData/AtomicStates_Cu.txt";

        static constexpr char const* boundBoundTransitionsFileName = "./atomicInputData/BoundBoundTransitions_Cu.txt";
        static constexpr char const* boundFreeTransitionsFileName = "./atomicInputData/BoundFreeTransitions_Cu.txt";
        static constexpr char const* autonomousTransitionsFileName = "./atomicInputData/AutonomousTransitions_Cu.txt";

        static constexpr char const* pressureIonizationStatesFileName = "";

        //! @attention only channels activated in both data and solver are actually possible
        using AtomicDataType = atomicPhysics::AtomicData_Cu;

        static constexpr uint16_t numberAtomicStates = 869u;

        using IonizationElectronSpecies = BulkElectrons;
    };

    using ParticleFlagsCopper = MakeSeq_t<
        particlePusher<UsedParticlePusher>,
        shape<UsedParticleShape>,
        interpolation<UsedField2Particle>,
        current<UsedParticleCurrentSolver>,
        massRatio<MassRatioCopper>,
        chargeRatio<ChargeRatioCopper>,
        densityRatio<DensityRatioCopper>,
        atomicNumbers<ionization::atomicNumbers::Copper_t>,
        atomicPhysicsParticle<particles::atomicPhysics::Ion<CopperAtomicPhysicsCfg>>>;

    using CopperAttributes = MakeSeq_t<
        DefaultParticleAttributes,
        // see definition in speciesAttributes.param
        atomicPhysicsIonParticleAttributes>;


    /* define species ions */
    using CopperIons = Particles<PMACC_CSTRING("Cu"), ParticleFlagsCopper, CopperAttributes>;

    /*########################### end species ####################################*/

    /** All known particle species of the simulation
     *
     * List all defined particle species from above in this list
     * to make them available to the PIC algorithm.
     */
    using VectorAllSpecies = MakeSeq_t<BulkElectrons, CopperIons>;

} // namespace picongpu
