/* Copyright 2020-2023 Franz Poeschel, Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */
#pragma once

#include "openPMD/openPMD.hpp"

#include <pmacc/eventSystem/waitForAllTasks.hpp>

#include <cstdlib> // std::getenv
#include <memory>
#include <string> // std::stoull
#include <utility> // std::declval

#include <openPMD/RecordComponent.hpp>

namespace picongpu
{
    namespace openPMD
    {
        /** PIConGPU's IO major file version.
         *
         * The version can be used to handle incompatibilities between checkpoint files in case breaking changes
         * within the openPMD checkpoint code are introduced.
         * A change in the major version points to a new feature/fix that cannot be handled by an older PIConGPU IO
         * implementations. Newer PIConGPU IO implementations can optionally support old major versions.
         *
         * @attention If the version is changed please update openPMDWriter::checkIOFileVersionRestartCompatibility().
         */
        static constexpr int picongpuIOVersionMajor = 3;

        /** PIConGPU's IO minor file version.
         *
         * A change in the minor version means that the new introduced feature/fix can be loaded by all PIConGPU IO
         * implementations with the same major IO file version.
         *
         * @attention If the version is changed please update openPMDWriter::checkIOFileVersionRestartCompatibility()
         * if needed.
         */
        static constexpr int picongpuIOVersionMinor = 0;

        namespace detail
        {
            template<typename RecordComponent = ::openPMD::RecordComponent, typename Dummy = void>
            struct StoreChunkRaw
            {
                template<typename T>
                static void store(RecordComponent& rc, T* ptr, ::openPMD::Offset offset, ::openPMD::Extent extent)
                {
                    rc.template storeChunk<T>(::openPMD::shareRaw(ptr), std::move(offset), std::move(extent));
                }

                template<typename T>
                static void load(RecordComponent& rc, T* ptr, ::openPMD::Offset offset, ::openPMD::Extent extent)
                {
                    rc.template loadChunk<T>(::openPMD::shareRaw(ptr), std::move(offset), std::move(extent));
                }
            };

            template<typename RecordComponent>
            struct StoreChunkRaw<
                RecordComponent,
                decltype(std::declval<RecordComponent>().storeChunkRaw(
                    std::declval<char*>(),
                    std::declval<::openPMD::Offset>(),
                    std::declval<::openPMD::Extent>()))>
            {
                template<typename T>
                static void store(RecordComponent& rc, T* ptr, ::openPMD::Offset offset, ::openPMD::Extent extent)
                {
                    rc.template storeChunkRaw<T>(ptr, std::move(offset), std::move(extent));
                }

                template<typename T>
                static void load(RecordComponent& rc, T* ptr, ::openPMD::Offset offset, ::openPMD::Extent extent)
                {
                    rc.template loadChunkRaw<T>(ptr, std::move(offset), std::move(extent));
                }
            };
        } // namespace detail

        template<typename T>
        void storeChunkRaw(::openPMD::RecordComponent& rc, T* ptr, ::openPMD::Offset offset, ::openPMD::Extent extent)
        {
            detail::StoreChunkRaw<::openPMD::RecordComponent>::store(rc, ptr, std::move(offset), std::move(extent));
        }

        template<typename T>
        void loadChunkRaw(::openPMD::RecordComponent& rc, T* ptr, ::openPMD::Offset offset, ::openPMD::Extent extent)
        {
            detail::StoreChunkRaw<::openPMD::RecordComponent>::load(rc, ptr, std::move(offset), std::move(extent));
        }


        enum class PreferredFlushTarget : bool
        {
            Disk,
            Buffer
        };

        namespace detail
        {
            /*
             * Do some SFINAE tricks to detect whether the openPMD API allows
             * specifying JSON configs in flush calls or not.
             */
            template<typename Series = ::openPMD::Series, typename Dummy = void>
            struct FlushSeries
            {
                constexpr static bool supportsFlushParameters = false;
                static void run(Series& series, PreferredFlushTarget)
                {
                    series.flush();
                }
            };

            /*
             * Enable this if Series::flush accepts string parameters.
             */
            template<typename Series>
            struct FlushSeries<Series, decltype(std::declval<Series>().flush(std::declval<std::string>()))>
            {
                constexpr static bool supportsFlushParameters = true;
                static constexpr char const* jsonConfigBP5TargetBuffer
                    = R"({"adios2": {"engine": {"preferred_flush_target": "buffer"}}})";
                static constexpr char const* jsonConfigBP5TargetDisk
                    = R"({"adios2": {"engine": {"preferred_flush_target": "disk"}}})";

                static void run(Series& series, PreferredFlushTarget target)
                {
                    switch(target)
                    {
                    case PreferredFlushTarget::Disk:
                        // avoid deadlocks between not finished pmacc communication tasks and potential blocking
                        // collectives in openPMD IO backends
                        pmacc::eventSystem::waitForAllTasks();
                        series.flush(jsonConfigBP5TargetDisk);
                        break;
                    case PreferredFlushTarget::Buffer:
                        series.flush(jsonConfigBP5TargetBuffer);
                        break;
                    }
                }
            };
        } // namespace detail

        inline void flushSeries(::openPMD::Series& series, PreferredFlushTarget target)
        {
            detail::FlushSeries<>::run(series, target);
        }

    } // namespace openPMD
} // namespace picongpu
